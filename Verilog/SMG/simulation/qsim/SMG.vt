// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/04/2018 15:38:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SMG
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SMG_vlg_sample_tst(
	CLK,
	DATA,
	RST_N,
	sampler_tx
);
input  CLK;
input [15:0] DATA;
input  RST_N;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or DATA or RST_N)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SMG_vlg_check_tst (
	DUAN,
	SEL,
	sampler_rx
);
input [7:0] DUAN;
input [2:0] SEL;
input sampler_rx;

reg [7:0] DUAN_expected;
reg [2:0] SEL_expected;

reg [7:0] DUAN_prev;
reg [2:0] SEL_prev;

reg [7:0] DUAN_expected_prev;
reg [2:0] SEL_expected_prev;

reg [7:0] last_DUAN_exp;
reg [2:0] last_SEL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DUAN_prev = DUAN;
	SEL_prev = SEL;
end

// update expected /o prevs

always @(trigger)
begin
	DUAN_expected_prev = DUAN_expected;
	SEL_expected_prev = SEL_expected;
end


// expected DUAN[ 7 ]
initial
begin
	DUAN_expected[7] = 1'bX;
end 
// expected DUAN[ 6 ]
initial
begin
	DUAN_expected[6] = 1'bX;
end 
// expected DUAN[ 5 ]
initial
begin
	DUAN_expected[5] = 1'bX;
end 
// expected DUAN[ 4 ]
initial
begin
	DUAN_expected[4] = 1'bX;
end 
// expected DUAN[ 3 ]
initial
begin
	DUAN_expected[3] = 1'bX;
end 
// expected DUAN[ 2 ]
initial
begin
	DUAN_expected[2] = 1'bX;
end 
// expected DUAN[ 1 ]
initial
begin
	DUAN_expected[1] = 1'bX;
end 
// expected DUAN[ 0 ]
initial
begin
	DUAN_expected[0] = 1'bX;
end 
// expected SEL[ 2 ]
initial
begin
	SEL_expected[2] = 1'bX;
end 
// expected SEL[ 1 ]
initial
begin
	SEL_expected[1] = 1'bX;
end 
// expected SEL[ 0 ]
initial
begin
	SEL_expected[0] = 1'bX;
end 
// generate trigger
always @(DUAN_expected or DUAN or SEL_expected or SEL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DUAN = %b | expected SEL = %b | ",DUAN_expected_prev,SEL_expected_prev);
	$display("| real DUAN = %b | real SEL = %b | ",DUAN_prev,SEL_prev);
`endif
	if (
		( DUAN_expected_prev[0] !== 1'bx ) && ( DUAN_prev[0] !== DUAN_expected_prev[0] )
		&& ((DUAN_expected_prev[0] !== last_DUAN_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[0] = DUAN_expected_prev[0];
	end
	if (
		( DUAN_expected_prev[1] !== 1'bx ) && ( DUAN_prev[1] !== DUAN_expected_prev[1] )
		&& ((DUAN_expected_prev[1] !== last_DUAN_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[1] = DUAN_expected_prev[1];
	end
	if (
		( DUAN_expected_prev[2] !== 1'bx ) && ( DUAN_prev[2] !== DUAN_expected_prev[2] )
		&& ((DUAN_expected_prev[2] !== last_DUAN_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[2] = DUAN_expected_prev[2];
	end
	if (
		( DUAN_expected_prev[3] !== 1'bx ) && ( DUAN_prev[3] !== DUAN_expected_prev[3] )
		&& ((DUAN_expected_prev[3] !== last_DUAN_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[3] = DUAN_expected_prev[3];
	end
	if (
		( DUAN_expected_prev[4] !== 1'bx ) && ( DUAN_prev[4] !== DUAN_expected_prev[4] )
		&& ((DUAN_expected_prev[4] !== last_DUAN_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[4] = DUAN_expected_prev[4];
	end
	if (
		( DUAN_expected_prev[5] !== 1'bx ) && ( DUAN_prev[5] !== DUAN_expected_prev[5] )
		&& ((DUAN_expected_prev[5] !== last_DUAN_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[5] = DUAN_expected_prev[5];
	end
	if (
		( DUAN_expected_prev[6] !== 1'bx ) && ( DUAN_prev[6] !== DUAN_expected_prev[6] )
		&& ((DUAN_expected_prev[6] !== last_DUAN_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[6] = DUAN_expected_prev[6];
	end
	if (
		( DUAN_expected_prev[7] !== 1'bx ) && ( DUAN_prev[7] !== DUAN_expected_prev[7] )
		&& ((DUAN_expected_prev[7] !== last_DUAN_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUAN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUAN_expected_prev);
		$display ("     Real value = %b", DUAN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DUAN_exp[7] = DUAN_expected_prev[7];
	end
	if (
		( SEL_expected_prev[0] !== 1'bx ) && ( SEL_prev[0] !== SEL_expected_prev[0] )
		&& ((SEL_expected_prev[0] !== last_SEL_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[0] = SEL_expected_prev[0];
	end
	if (
		( SEL_expected_prev[1] !== 1'bx ) && ( SEL_prev[1] !== SEL_expected_prev[1] )
		&& ((SEL_expected_prev[1] !== last_SEL_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[1] = SEL_expected_prev[1];
	end
	if (
		( SEL_expected_prev[2] !== 1'bx ) && ( SEL_prev[2] !== SEL_expected_prev[2] )
		&& ((SEL_expected_prev[2] !== last_SEL_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[2] = SEL_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SMG_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] DATA;
reg RST_N;
// wires                                               
wire [7:0] DUAN;
wire [2:0] SEL;

wire sampler;                             

// assign statements (if any)                          
SMG i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DATA(DATA),
	.DUAN(DUAN),
	.RST_N(RST_N),
	.SEL(SEL)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 
// DATA[ 15 ]
initial
begin
	DATA[15] = 1'b0;
end 
// DATA[ 14 ]
initial
begin
	DATA[14] = 1'b0;
end 
// DATA[ 13 ]
initial
begin
	DATA[13] = 1'b0;
	DATA[13] = #200000 1'b1;
	DATA[13] = #60000 1'b0;
end 
// DATA[ 12 ]
initial
begin
	DATA[12] = 1'b0;
end 
// DATA[ 11 ]
initial
begin
	DATA[11] = 1'b0;
end 
// DATA[ 10 ]
initial
begin
	DATA[10] = 1'b0;
	DATA[10] = #380000 1'b1;
	DATA[10] = #40000 1'b0;
end 
// DATA[ 9 ]
initial
begin
	DATA[9] = 1'b0;
	DATA[9] = #380000 1'b1;
	DATA[9] = #40000 1'b0;
end 
// DATA[ 8 ]
initial
begin
	DATA[8] = 1'b0;
	DATA[8] = #500000 1'b1;
	DATA[8] = #40000 1'b0;
end 
// DATA[ 7 ]
initial
begin
	DATA[7] = 1'b0;
	DATA[7] = #500000 1'b1;
	DATA[7] = #40000 1'b0;
end 
// DATA[ 6 ]
initial
begin
	DATA[6] = 1'b0;
	DATA[6] = #500000 1'b1;
	DATA[6] = #40000 1'b0;
end 
// DATA[ 5 ]
initial
begin
	DATA[5] = 1'b0;
	DATA[5] = #500000 1'b1;
	DATA[5] = #40000 1'b0;
end 
// DATA[ 4 ]
initial
begin
	DATA[4] = 1'b0;
end 
// DATA[ 3 ]
initial
begin
	DATA[3] = 1'b0;
end 
// DATA[ 2 ]
initial
begin
	DATA[2] = 1'b0;
end 
// DATA[ 1 ]
initial
begin
	DATA[1] = 1'b0;
end 
// DATA[ 0 ]
initial
begin
	DATA[0] = 1'b0;
end 

// RST_N
initial
begin
	RST_N = 1'b1;
	RST_N = #80000 1'b0;
	RST_N = #40000 1'b1;
end 

SMG_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.DATA(DATA),
	.RST_N(RST_N),
	.sampler_tx(sampler)
);

SMG_vlg_check_tst tb_out(
	.DUAN(DUAN),
	.SEL(SEL),
	.sampler_rx(sampler)
);
endmodule

