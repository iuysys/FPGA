// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Full Version"

// DATE "05/07/2018 15:51:20"

// 
// Device: Altera EP2C8Q208C8 Package PQFP208
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module key_scan (
	CLK,
	RST_N,
	key_s,
	key_w,
	key_p,
	key_value);
input 	CLK;
input 	RST_N;
input 	key_s;
input 	key_w;
input 	key_p;
output 	[2:0] key_value;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \key_s~combout ;
wire \CLK~combout ;
wire \key_w~combout ;
wire \key_value~0_combout ;
wire \RST_N~combout ;
wire \key_value[0]~reg0_regout ;


cycloneii_io \key_s~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\key_s~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(key_s));
// synopsys translate_off
defparam \key_s~I .input_async_reset = "none";
defparam \key_s~I .input_power_up = "low";
defparam \key_s~I .input_register_mode = "none";
defparam \key_s~I .input_sync_reset = "none";
defparam \key_s~I .oe_async_reset = "none";
defparam \key_s~I .oe_power_up = "low";
defparam \key_s~I .oe_register_mode = "none";
defparam \key_s~I .oe_sync_reset = "none";
defparam \key_s~I .operation_mode = "input";
defparam \key_s~I .output_async_reset = "none";
defparam \key_s~I .output_power_up = "low";
defparam \key_s~I .output_register_mode = "none";
defparam \key_s~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \CLK~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\CLK~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(CLK));
// synopsys translate_off
defparam \CLK~I .input_async_reset = "none";
defparam \CLK~I .input_power_up = "low";
defparam \CLK~I .input_register_mode = "none";
defparam \CLK~I .input_sync_reset = "none";
defparam \CLK~I .oe_async_reset = "none";
defparam \CLK~I .oe_power_up = "low";
defparam \CLK~I .oe_register_mode = "none";
defparam \CLK~I .oe_sync_reset = "none";
defparam \CLK~I .operation_mode = "input";
defparam \CLK~I .output_async_reset = "none";
defparam \CLK~I .output_power_up = "low";
defparam \CLK~I .output_register_mode = "none";
defparam \CLK~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \key_w~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\key_w~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(key_w));
// synopsys translate_off
defparam \key_w~I .input_async_reset = "none";
defparam \key_w~I .input_power_up = "low";
defparam \key_w~I .input_register_mode = "none";
defparam \key_w~I .input_sync_reset = "none";
defparam \key_w~I .oe_async_reset = "none";
defparam \key_w~I .oe_power_up = "low";
defparam \key_w~I .oe_register_mode = "none";
defparam \key_w~I .oe_sync_reset = "none";
defparam \key_w~I .operation_mode = "input";
defparam \key_w~I .output_async_reset = "none";
defparam \key_w~I .output_power_up = "low";
defparam \key_w~I .output_register_mode = "none";
defparam \key_w~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_comb \key_value~0 (
// Equation(s):
// \key_value~0_combout  = (\key_value[0]~reg0_regout ) # ((!\key_s~combout  & \key_w~combout ))

	.dataa(\key_s~combout ),
	.datab(vcc),
	.datac(\key_w~combout ),
	.datad(\key_value[0]~reg0_regout ),
	.cin(gnd),
	.combout(\key_value~0_combout ),
	.cout());
// synopsys translate_off
defparam \key_value~0 .lut_mask = 16'hFF50;
defparam \key_value~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneii_io \RST_N~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(\RST_N~combout ),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(RST_N));
// synopsys translate_off
defparam \RST_N~I .input_async_reset = "none";
defparam \RST_N~I .input_power_up = "low";
defparam \RST_N~I .input_register_mode = "none";
defparam \RST_N~I .input_sync_reset = "none";
defparam \RST_N~I .oe_async_reset = "none";
defparam \RST_N~I .oe_power_up = "low";
defparam \RST_N~I .oe_register_mode = "none";
defparam \RST_N~I .oe_sync_reset = "none";
defparam \RST_N~I .operation_mode = "input";
defparam \RST_N~I .output_async_reset = "none";
defparam \RST_N~I .output_power_up = "low";
defparam \RST_N~I .output_register_mode = "none";
defparam \RST_N~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_lcell_ff \key_value[0]~reg0 (
	.clk(\CLK~combout ),
	.datain(\key_value~0_combout ),
	.sdata(gnd),
	.aclr(!\RST_N~combout ),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.regout(\key_value[0]~reg0_regout ));

cycloneii_io \key_p~I (
	.datain(gnd),
	.oe(gnd),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(key_p));
// synopsys translate_off
defparam \key_p~I .input_async_reset = "none";
defparam \key_p~I .input_power_up = "low";
defparam \key_p~I .input_register_mode = "none";
defparam \key_p~I .input_sync_reset = "none";
defparam \key_p~I .oe_async_reset = "none";
defparam \key_p~I .oe_power_up = "low";
defparam \key_p~I .oe_register_mode = "none";
defparam \key_p~I .oe_sync_reset = "none";
defparam \key_p~I .operation_mode = "input";
defparam \key_p~I .output_async_reset = "none";
defparam \key_p~I .output_power_up = "low";
defparam \key_p~I .output_register_mode = "none";
defparam \key_p~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \key_value[0]~I (
	.datain(\key_value[0]~reg0_regout ),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(key_value[0]));
// synopsys translate_off
defparam \key_value[0]~I .input_async_reset = "none";
defparam \key_value[0]~I .input_power_up = "low";
defparam \key_value[0]~I .input_register_mode = "none";
defparam \key_value[0]~I .input_sync_reset = "none";
defparam \key_value[0]~I .oe_async_reset = "none";
defparam \key_value[0]~I .oe_power_up = "low";
defparam \key_value[0]~I .oe_register_mode = "none";
defparam \key_value[0]~I .oe_sync_reset = "none";
defparam \key_value[0]~I .operation_mode = "output";
defparam \key_value[0]~I .output_async_reset = "none";
defparam \key_value[0]~I .output_power_up = "low";
defparam \key_value[0]~I .output_register_mode = "none";
defparam \key_value[0]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \key_value[1]~I (
	.datain(gnd),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(key_value[1]));
// synopsys translate_off
defparam \key_value[1]~I .input_async_reset = "none";
defparam \key_value[1]~I .input_power_up = "low";
defparam \key_value[1]~I .input_register_mode = "none";
defparam \key_value[1]~I .input_sync_reset = "none";
defparam \key_value[1]~I .oe_async_reset = "none";
defparam \key_value[1]~I .oe_power_up = "low";
defparam \key_value[1]~I .oe_register_mode = "none";
defparam \key_value[1]~I .oe_sync_reset = "none";
defparam \key_value[1]~I .operation_mode = "output";
defparam \key_value[1]~I .output_async_reset = "none";
defparam \key_value[1]~I .output_power_up = "low";
defparam \key_value[1]~I .output_register_mode = "none";
defparam \key_value[1]~I .output_sync_reset = "none";
// synopsys translate_on

cycloneii_io \key_value[2]~I (
	.datain(gnd),
	.oe(vcc),
	.outclk(gnd),
	.outclkena(vcc),
	.inclk(gnd),
	.inclkena(vcc),
	.areset(gnd),
	.sreset(gnd),
	.differentialin(gnd),
	.linkin(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.combout(),
	.regout(),
	.differentialout(),
	.linkout(),
	.padio(key_value[2]));
// synopsys translate_off
defparam \key_value[2]~I .input_async_reset = "none";
defparam \key_value[2]~I .input_power_up = "low";
defparam \key_value[2]~I .input_register_mode = "none";
defparam \key_value[2]~I .input_sync_reset = "none";
defparam \key_value[2]~I .oe_async_reset = "none";
defparam \key_value[2]~I .oe_power_up = "low";
defparam \key_value[2]~I .oe_register_mode = "none";
defparam \key_value[2]~I .oe_sync_reset = "none";
defparam \key_value[2]~I .operation_mode = "output";
defparam \key_value[2]~I .output_async_reset = "none";
defparam \key_value[2]~I .output_power_up = "low";
defparam \key_value[2]~I .output_register_mode = "none";
defparam \key_value[2]~I .output_sync_reset = "none";
// synopsys translate_on

endmodule
