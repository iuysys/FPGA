// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/06/2018 16:26:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    washing_state_machine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module washing_state_machine_vlg_sample_tst(
	CLK,
	RST_N,
	fangshui_flag,
	key,
	sampler_tx
);
input  CLK;
input  RST_N;
input  fangshui_flag;
input [2:0] key;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or RST_N or fangshui_flag or key)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module washing_state_machine_vlg_check_tst (
	led_fangshui,
	led_motor_f,
	led_motor_o,
	led_start,
	led_tuoshui,
	led_zhushui,
	sampler_rx
);
input  led_fangshui;
input  led_motor_f;
input  led_motor_o;
input  led_start;
input  led_tuoshui;
input  led_zhushui;
input sampler_rx;

reg  led_fangshui_expected;
reg  led_motor_f_expected;
reg  led_motor_o_expected;
reg  led_start_expected;
reg  led_tuoshui_expected;
reg  led_zhushui_expected;

reg  led_fangshui_prev;
reg  led_motor_f_prev;
reg  led_motor_o_prev;
reg  led_start_prev;
reg  led_tuoshui_prev;
reg  led_zhushui_prev;

reg  led_fangshui_expected_prev;
reg  led_motor_f_expected_prev;
reg  led_motor_o_expected_prev;
reg  led_start_expected_prev;
reg  led_tuoshui_expected_prev;
reg  led_zhushui_expected_prev;

reg  last_led_fangshui_exp;
reg  last_led_motor_f_exp;
reg  last_led_motor_o_exp;
reg  last_led_start_exp;
reg  last_led_tuoshui_exp;
reg  last_led_zhushui_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_fangshui_prev = led_fangshui;
	led_motor_f_prev = led_motor_f;
	led_motor_o_prev = led_motor_o;
	led_start_prev = led_start;
	led_tuoshui_prev = led_tuoshui;
	led_zhushui_prev = led_zhushui;
end

// update expected /o prevs

always @(trigger)
begin
	led_fangshui_expected_prev = led_fangshui_expected;
	led_motor_f_expected_prev = led_motor_f_expected;
	led_motor_o_expected_prev = led_motor_o_expected;
	led_start_expected_prev = led_start_expected;
	led_tuoshui_expected_prev = led_tuoshui_expected;
	led_zhushui_expected_prev = led_zhushui_expected;
end



// expected led_start
initial
begin
	led_start_expected = 1'bX;
end 

// expected led_zhushui
initial
begin
	led_zhushui_expected = 1'bX;
end 

// expected led_motor_f
initial
begin
	led_motor_f_expected = 1'bX;
end 

// expected led_motor_o
initial
begin
	led_motor_o_expected = 1'bX;
end 

// expected led_fangshui
initial
begin
	led_fangshui_expected = 1'bX;
end 

// expected led_tuoshui
initial
begin
	led_tuoshui_expected = 1'bX;
end 
// generate trigger
always @(led_fangshui_expected or led_fangshui or led_motor_f_expected or led_motor_f or led_motor_o_expected or led_motor_o or led_start_expected or led_start or led_tuoshui_expected or led_tuoshui or led_zhushui_expected or led_zhushui)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_fangshui = %b | expected led_motor_f = %b | expected led_motor_o = %b | expected led_start = %b | expected led_tuoshui = %b | expected led_zhushui = %b | ",led_fangshui_expected_prev,led_motor_f_expected_prev,led_motor_o_expected_prev,led_start_expected_prev,led_tuoshui_expected_prev,led_zhushui_expected_prev);
	$display("| real led_fangshui = %b | real led_motor_f = %b | real led_motor_o = %b | real led_start = %b | real led_tuoshui = %b | real led_zhushui = %b | ",led_fangshui_prev,led_motor_f_prev,led_motor_o_prev,led_start_prev,led_tuoshui_prev,led_zhushui_prev);
`endif
	if (
		( led_fangshui_expected_prev !== 1'bx ) && ( led_fangshui_prev !== led_fangshui_expected_prev )
		&& ((led_fangshui_expected_prev !== last_led_fangshui_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_fangshui :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_fangshui_expected_prev);
		$display ("     Real value = %b", led_fangshui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_fangshui_exp = led_fangshui_expected_prev;
	end
	if (
		( led_motor_f_expected_prev !== 1'bx ) && ( led_motor_f_prev !== led_motor_f_expected_prev )
		&& ((led_motor_f_expected_prev !== last_led_motor_f_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_motor_f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_motor_f_expected_prev);
		$display ("     Real value = %b", led_motor_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_motor_f_exp = led_motor_f_expected_prev;
	end
	if (
		( led_motor_o_expected_prev !== 1'bx ) && ( led_motor_o_prev !== led_motor_o_expected_prev )
		&& ((led_motor_o_expected_prev !== last_led_motor_o_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_motor_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_motor_o_expected_prev);
		$display ("     Real value = %b", led_motor_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_led_motor_o_exp = led_motor_o_expected_prev;
	end
	if (
		( led_start_expected_prev !== 1'bx ) && ( led_start_prev !== led_start_expected_prev )
		&& ((led_start_expected_prev !== last_led_start_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_start_expected_prev);
		$display ("     Real value = %b", led_start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_led_start_exp = led_start_expected_prev;
	end
	if (
		( led_tuoshui_expected_prev !== 1'bx ) && ( led_tuoshui_prev !== led_tuoshui_expected_prev )
		&& ((led_tuoshui_expected_prev !== last_led_tuoshui_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_tuoshui :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_tuoshui_expected_prev);
		$display ("     Real value = %b", led_tuoshui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_led_tuoshui_exp = led_tuoshui_expected_prev;
	end
	if (
		( led_zhushui_expected_prev !== 1'bx ) && ( led_zhushui_prev !== led_zhushui_expected_prev )
		&& ((led_zhushui_expected_prev !== last_led_zhushui_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_zhushui :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_zhushui_expected_prev);
		$display ("     Real value = %b", led_zhushui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_zhushui_exp = led_zhushui_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module washing_state_machine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST_N;
reg fangshui_flag;
reg [2:0] key;
// wires                                               
wire led_fangshui;
wire led_motor_f;
wire led_motor_o;
wire led_start;
wire led_tuoshui;
wire led_zhushui;

wire sampler;                             

// assign statements (if any)                          
washing_state_machine i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.RST_N(RST_N),
	.fangshui_flag(fangshui_flag),
	.key(key),
	.led_fangshui(led_fangshui),
	.led_motor_f(led_motor_f),
	.led_motor_o(led_motor_o),
	.led_start(led_start),
	.led_tuoshui(led_tuoshui),
	.led_zhushui(led_zhushui)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 

// RST_N
initial
begin
	RST_N = 1'b1;
	RST_N = #30000 1'b0;
	RST_N = #10000 1'b1;
end 

// fangshui_flag
initial
begin
	fangshui_flag = 1'b1;
	fangshui_flag = #4880000 1'b0;
	fangshui_flag = #80000 1'b1;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
	key[2] = #1120000 1'b1;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
	key[1] = #200000 1'b1;
	key[1] = #920000 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
	key[0] = #80000 1'b1;
	key[0] = #120000 1'b0;
	key[0] = #320000 1'b1;
	key[0] = #600000 1'b0;
	key[0] = #240000 1'b1;
end 

washing_state_machine_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.RST_N(RST_N),
	.fangshui_flag(fangshui_flag),
	.key(key),
	.sampler_tx(sampler)
);

washing_state_machine_vlg_check_tst tb_out(
	.led_fangshui(led_fangshui),
	.led_motor_f(led_motor_f),
	.led_motor_o(led_motor_o),
	.led_start(led_start),
	.led_tuoshui(led_tuoshui),
	.led_zhushui(led_zhushui),
	.sampler_rx(sampler)
);
endmodule

