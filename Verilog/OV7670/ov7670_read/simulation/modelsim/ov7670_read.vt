// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/20/2018 11:29:40"
                                                                                
// Verilog Test Bench template for design : ov7670_read
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module ov7670_read_vlg_tst();
// constants                                           
// general purpose registers
// test vector input registers
reg CACHE_RCLK;
reg CACHE_RREQ;
reg CLK_40M;
reg [7:0] OV_DATA;
reg READ_EN;
reg RST_N;
// wires                                               
wire [15:0]  CACHE_DATA;
wire CACHE_RD_EN;
wire OV_RCLK;
wire OV_RRST;
wire RD_FRAME;

// assign statements (if any)                          
ov7670_read i1 (
// port map - connection between master ports and signals/registers   
	.CACHE_DATA(CACHE_DATA),
	.CACHE_RD_EN(CACHE_RD_EN),
	.CACHE_RCLK(CACHE_RCLK),
	.CACHE_RREQ(CACHE_RREQ),
	.CLK_40M(CLK_40M),
	.OV_DATA(OV_DATA),
	.OV_RCLK(OV_RCLK),
	.OV_RRST(OV_RRST),
	.RD_FRAME(RD_FRAME),
	.READ_EN(READ_EN),
	.RST_N(RST_N)
);


initial                                                
begin                                                  
	CACHE_RCLK = 1 ;
	CACHE_RREQ = 1 ;
	CLK_40M = 1 ;
	OV_DATA = 8'HAF;
	READ_EN = 0 ;
	RST_N = 1 ; 
	#100 RST_N = 0 ;
	#20 RST_N = 1 ;
	#400 READ_EN = 1 ;
	
	
$display("Running testbench");                       
end                                                    



always
	#1 CLK_40M = ~ CLK_40M ;

always@(posedge CLK_40M)
begin
	if(CACHE_RD_EN == 1'B1)
	begin
		CACHE_RREQ <= 1'B1 ;
	end
	else
		CACHE_RREQ <= 1'B0 ;
	
end




always  #1 CACHE_RCLK = ~ CACHE_RCLK ;










                                             
endmodule

